/*
Не используя context и буферизованные каналы необходимо написать программу,
которая будет запускать 10 рабочих горутин и одну капризную управляющую горутину.
Каждая рабочая горутина с задержкой в 1 секунду должна выводить в stdout сообщение «сложные вычисления горутины: 1»,
где 1 - порядковый номер горутины.
Управляющая горутина через 3 секунды после своего запуска должна в stdout вывести «ой, всё!»,
после чего рабочие горутины должны в stdout вывести «stop горутина: 1», где 1 - порядковый номер горутины,
и завершить своё выполнение. В консоли должны увидеть что-то подобное
сложные вычисления горутины: 0
сложные вычисления горутины: 1
сложные вычисления горутины: 5
сложные вычисления горутины: 6
ой, всё!
сложные вычисления горутины: 3
stop горутина: 3
сложные вычисления горутины: 9
stop горутина: 9
сложные вычисления горутины: 7
*/

package main

import (
	//"context"
	"fmt"
	"time"
)

func main() {
	quit := make(chan bool) // сигнальный канал для остановки горутин

	for i := 1; i < 11; i++ {

		go func() {
			for {
				fmt.Println("сложные вычисления горутины: ", i)
				select {
				case <-quit:
					fmt.Println("stop горутина:", i)
					quit <- true
					return
				default:
					time.Sleep(time.Second)
				}
			}
		}()
	}

	time.Sleep(3 * time.Second)
	fmt.Println("ой, все!")
	quit <- true

	time.Sleep(10 * time.Second) // ждем окончания работы

}
